'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3082
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System.Data.Linq
	Imports System.Data.Linq.Mapping
	Imports System.Data
	Imports System.Collections.Generic
	Imports System.Reflection
	Imports System.Linq
	Imports System.Linq.Expressions
	Imports System.ComponentModel
	Imports System
Namespace LinqServerModeOnAdvWorks


	<System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorks")> _
	Partial Public Class AdvWorksDataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertPurchaseOrderHeader(ByVal instance As PurchaseOrderHeader)
	End Sub
	Partial Private Sub UpdatePurchaseOrderHeader(ByVal instance As PurchaseOrderHeader)
	End Sub
	Partial Private Sub DeletePurchaseOrderHeader(ByVal instance As PurchaseOrderHeader)
	End Sub
	Partial Private Sub InsertPurchaseOrderDetail(ByVal instance As PurchaseOrderDetail)
	End Sub
	Partial Private Sub UpdatePurchaseOrderDetail(ByVal instance As PurchaseOrderDetail)
	End Sub
	Partial Private Sub DeletePurchaseOrderDetail(ByVal instance As PurchaseOrderDetail)
	End Sub
	Partial Private Sub InsertProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub UpdateProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub DeleteProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub InsertEmployee(ByVal instance As Employee)
	End Sub
	Partial Private Sub UpdateEmployee(ByVal instance As Employee)
	End Sub
	Partial Private Sub DeleteEmployee(ByVal instance As Employee)
	End Sub
	Partial Private Sub InsertContact(ByVal instance As Contact)
	End Sub
	Partial Private Sub UpdateContact(ByVal instance As Contact)
	End Sub
	Partial Private Sub DeleteContact(ByVal instance As Contact)
	End Sub
	#End Region

		Public Sub New()
			MyBase.New(My.Settings.Default.AdventureWorksConnectionString, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property PurchaseOrderHeaders() As System.Data.Linq.Table(Of PurchaseOrderHeader)
			Get
				Return Me.GetTable(Of PurchaseOrderHeader)()
			End Get
		End Property

		Public ReadOnly Property PurchaseOrderDetails() As System.Data.Linq.Table(Of PurchaseOrderDetail)
			Get
				Return Me.GetTable(Of PurchaseOrderDetail)()
			End Get
		End Property

		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
			Get
				Return Me.GetTable(Of Product)()
			End Get
		End Property

		Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
			Get
				Return Me.GetTable(Of Employee)()
			End Get
		End Property

		Public ReadOnly Property Contacts() As System.Data.Linq.Table(Of Contact)
			Get
				Return Me.GetTable(Of Contact)()
			End Get
		End Property
	End Class

	<Table(Name:="Purchasing.PurchaseOrderHeader")> _
	Partial Public Class PurchaseOrderHeader
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _PurchaseOrderID As Integer

		Private _RevisionNumber As Byte

		Private _Status As Byte

		Private _EmployeeID As Integer

		Private _VendorID As Integer

		Private _ShipMethodID As Integer

		Private _OrderDate As System.DateTime

		Private _ShipDate? As System.DateTime

		Private _SubTotal As Decimal

		Private _TaxAmt As Decimal

		Private _Freight As Decimal

		Private _TotalDue As Decimal

		Private _ModifiedDate As System.DateTime

		Private _PurchaseOrderDetails As EntitySet(Of PurchaseOrderDetail)

		Private _Employee As EntityRef(Of Employee)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnPurchaseOrderIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnPurchaseOrderIDChanged()
	End Sub
	Partial Private Sub OnRevisionNumberChanging(ByVal value As Byte)
	End Sub
	Partial Private Sub OnRevisionNumberChanged()
	End Sub
	Partial Private Sub OnStatusChanging(ByVal value As Byte)
	End Sub
	Partial Private Sub OnStatusChanged()
	End Sub
	Partial Private Sub OnEmployeeIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnEmployeeIDChanged()
	End Sub
	Partial Private Sub OnVendorIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnVendorIDChanged()
	End Sub
	Partial Private Sub OnShipMethodIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnShipMethodIDChanged()
	End Sub
	Partial Private Sub OnOrderDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnOrderDateChanged()
	End Sub
	Partial Private Sub OnShipDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnShipDateChanged()
	End Sub
	Partial Private Sub OnSubTotalChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnSubTotalChanged()
	End Sub
	Partial Private Sub OnTaxAmtChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnTaxAmtChanged()
	End Sub
	Partial Private Sub OnFreightChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnFreightChanged()
	End Sub
	Partial Private Sub OnTotalDueChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnTotalDueChanged()
	End Sub
	Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnModifiedDateChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._PurchaseOrderDetails = New EntitySet(Of PurchaseOrderDetail)(New Action(Of PurchaseOrderDetail)(AddressOf Me.attach_PurchaseOrderDetails), New Action(Of PurchaseOrderDetail)(AddressOf Me.detach_PurchaseOrderDetails))
			Me._Employee = Nothing
			OnCreated()
		End Sub

		<Column(Storage:="_PurchaseOrderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property PurchaseOrderID() As Integer
			Get
				Return Me._PurchaseOrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._PurchaseOrderID <> value) Then
					Me.OnPurchaseOrderIDChanging(value)
					Me.SendPropertyChanging()
					Me._PurchaseOrderID = value
					Me.SendPropertyChanged("PurchaseOrderID")
					Me.OnPurchaseOrderIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_RevisionNumber", DbType:="TinyInt NOT NULL")> _
		Public Property RevisionNumber() As Byte
			Get
				Return Me._RevisionNumber
			End Get
			Set(ByVal value As Byte)
				If (Me._RevisionNumber <> value) Then
					Me.OnRevisionNumberChanging(value)
					Me.SendPropertyChanging()
					Me._RevisionNumber = value
					Me.SendPropertyChanged("RevisionNumber")
					Me.OnRevisionNumberChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Status", DbType:="TinyInt NOT NULL")> _
		Public Property Status() As Byte
			Get
				Return Me._Status
			End Get
			Set(ByVal value As Byte)
				If (Me._Status <> value) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging()
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_EmployeeID", DbType:="Int NOT NULL")> _
		Public Property EmployeeID() As Integer
			Get
				Return Me._EmployeeID
			End Get
			Set(ByVal value As Integer)
				If (Me._EmployeeID <> value) Then
					If Me._Employee.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnEmployeeIDChanging(value)
					Me.SendPropertyChanging()
					Me._EmployeeID = value
					Me.SendPropertyChanged("EmployeeID")
					Me.OnEmployeeIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_VendorID", DbType:="Int NOT NULL")> _
		Public Property VendorID() As Integer
			Get
				Return Me._VendorID
			End Get
			Set(ByVal value As Integer)
				If (Me._VendorID <> value) Then
					Me.OnVendorIDChanging(value)
					Me.SendPropertyChanging()
					Me._VendorID = value
					Me.SendPropertyChanged("VendorID")
					Me.OnVendorIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ShipMethodID", DbType:="Int NOT NULL")> _
		Public Property ShipMethodID() As Integer
			Get
				Return Me._ShipMethodID
			End Get
			Set(ByVal value As Integer)
				If (Me._ShipMethodID <> value) Then
					Me.OnShipMethodIDChanging(value)
					Me.SendPropertyChanging()
					Me._ShipMethodID = value
					Me.SendPropertyChanged("ShipMethodID")
					Me.OnShipMethodIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_OrderDate", DbType:="DateTime NOT NULL")> _
		Public Property OrderDate() As System.DateTime
			Get
				Return Me._OrderDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._OrderDate <> value) Then
					Me.OnOrderDateChanging(value)
					Me.SendPropertyChanging()
					Me._OrderDate = value
					Me.SendPropertyChanged("OrderDate")
					Me.OnOrderDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ShipDate", DbType:="DateTime")> _
		Public Property ShipDate() As System.DateTime?
			Get
				Return Me._ShipDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._ShipDate.Equals(value)) Then
					Me.OnShipDateChanging(value)
					Me.SendPropertyChanging()
					Me._ShipDate = value
					Me.SendPropertyChanged("ShipDate")
					Me.OnShipDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_SubTotal", DbType:="Money NOT NULL")> _
		Public Property SubTotal() As Decimal
			Get
				Return Me._SubTotal
			End Get
			Set(ByVal value As Decimal)
				If (Me._SubTotal <> value) Then
					Me.OnSubTotalChanging(value)
					Me.SendPropertyChanging()
					Me._SubTotal = value
					Me.SendPropertyChanged("SubTotal")
					Me.OnSubTotalChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_TaxAmt", DbType:="Money NOT NULL")> _
		Public Property TaxAmt() As Decimal
			Get
				Return Me._TaxAmt
			End Get
			Set(ByVal value As Decimal)
				If (Me._TaxAmt <> value) Then
					Me.OnTaxAmtChanging(value)
					Me.SendPropertyChanging()
					Me._TaxAmt = value
					Me.SendPropertyChanged("TaxAmt")
					Me.OnTaxAmtChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Freight", DbType:="Money NOT NULL")> _
		Public Property Freight() As Decimal
			Get
				Return Me._Freight
			End Get
			Set(ByVal value As Decimal)
				If (Me._Freight <> value) Then
					Me.OnFreightChanging(value)
					Me.SendPropertyChanging()
					Me._Freight = value
					Me.SendPropertyChanged("Freight")
					Me.OnFreightChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_TotalDue", AutoSync:=AutoSync.Always, DbType:="Money NOT NULL", IsDbGenerated:=True, UpdateCheck:=UpdateCheck.Never)> _
		Public Property TotalDue() As Decimal
			Get
				Return Me._TotalDue
			End Get
			Set(ByVal value As Decimal)
				If (Me._TotalDue <> value) Then
					Me.OnTotalDueChanging(value)
					Me.SendPropertyChanging()
					Me._TotalDue = value
					Me.SendPropertyChanged("TotalDue")
					Me.OnTotalDueChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
		Public Property ModifiedDate() As System.DateTime
			Get
				Return Me._ModifiedDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._ModifiedDate <> value) Then
					Me.OnModifiedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ModifiedDate = value
					Me.SendPropertyChanged("ModifiedDate")
					Me.OnModifiedDateChanged()
				End If
			End Set
		End Property

		<Association(Name:="PurchaseOrderHeader_PurchaseOrderDetail", Storage:="_PurchaseOrderDetails", ThisKey:="PurchaseOrderID", OtherKey:="PurchaseOrderID")> _
		Public Property PurchaseOrderDetails() As EntitySet(Of PurchaseOrderDetail)
			Get
				Return Me._PurchaseOrderDetails
			End Get
			Set(ByVal value As EntitySet(Of PurchaseOrderDetail))
				Me._PurchaseOrderDetails.Assign(value)
			End Set
		End Property

		<Association(Name:="Employee_PurchaseOrderHeader", Storage:="_Employee", ThisKey:="EmployeeID", OtherKey:="EmployeeID", IsForeignKey:=True)> _
		Public Property Employee() As Employee
			Get
				Return Me._Employee.Entity
			End Get
			Set(ByVal value As Employee)
				Dim previousValue As Employee = Me._Employee.Entity
				If ((previousValue IsNot value) OrElse (Me._Employee.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Employee.Entity = Nothing
						previousValue.PurchaseOrderHeaders.Remove(Me)
					End If
					Me._Employee.Entity = value
					If (value IsNot Nothing) Then
						value.PurchaseOrderHeaders.Add(Me)
						Me._EmployeeID = value.EmployeeID
					Else
						Me._EmployeeID = Nothing
					End If
					Me.SendPropertyChanged("Employee")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_PurchaseOrderDetails(ByVal entity As PurchaseOrderDetail)
			Me.SendPropertyChanging()
			entity.PurchaseOrderHeader = Me
		End Sub

		Private Sub detach_PurchaseOrderDetails(ByVal entity As PurchaseOrderDetail)
			Me.SendPropertyChanging()
			entity.PurchaseOrderHeader = Nothing
		End Sub
	End Class

	<Table(Name:="Purchasing.PurchaseOrderDetail")> _
	Partial Public Class PurchaseOrderDetail
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _PurchaseOrderID As Integer

		Private _PurchaseOrderDetailID As Integer

		Private _DueDate As System.DateTime

		Private _OrderQty As Short

		Private _ProductID As Integer

		Private _UnitPrice As Decimal

		Private _LineTotal As Decimal

		Private _ReceivedQty As Decimal

		Private _RejectedQty As Decimal

		Private _StockedQty As Decimal

		Private _ModifiedDate As System.DateTime

		Private _PurchaseOrderHeader As EntityRef(Of PurchaseOrderHeader)

		Private _Product As EntityRef(Of Product)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnPurchaseOrderIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnPurchaseOrderIDChanged()
	End Sub
	Partial Private Sub OnPurchaseOrderDetailIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnPurchaseOrderDetailIDChanged()
	End Sub
	Partial Private Sub OnDueDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnDueDateChanged()
	End Sub
	Partial Private Sub OnOrderQtyChanging(ByVal value As Short)
	End Sub
	Partial Private Sub OnOrderQtyChanged()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnUnitPriceChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnUnitPriceChanged()
	End Sub
	Partial Private Sub OnLineTotalChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnLineTotalChanged()
	End Sub
	Partial Private Sub OnReceivedQtyChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnReceivedQtyChanged()
	End Sub
	Partial Private Sub OnRejectedQtyChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnRejectedQtyChanged()
	End Sub
	Partial Private Sub OnStockedQtyChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnStockedQtyChanged()
	End Sub
	Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnModifiedDateChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._PurchaseOrderHeader = Nothing
			Me._Product = Nothing
			OnCreated()
		End Sub

		<Column(Storage:="_PurchaseOrderID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
		Public Property PurchaseOrderID() As Integer
			Get
				Return Me._PurchaseOrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._PurchaseOrderID <> value) Then
					If Me._PurchaseOrderHeader.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnPurchaseOrderIDChanging(value)
					Me.SendPropertyChanging()
					Me._PurchaseOrderID = value
					Me.SendPropertyChanged("PurchaseOrderID")
					Me.OnPurchaseOrderIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_PurchaseOrderDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property PurchaseOrderDetailID() As Integer
			Get
				Return Me._PurchaseOrderDetailID
			End Get
			Set(ByVal value As Integer)
				If (Me._PurchaseOrderDetailID <> value) Then
					Me.OnPurchaseOrderDetailIDChanging(value)
					Me.SendPropertyChanging()
					Me._PurchaseOrderDetailID = value
					Me.SendPropertyChanged("PurchaseOrderDetailID")
					Me.OnPurchaseOrderDetailIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_DueDate", DbType:="DateTime NOT NULL")> _
		Public Property DueDate() As System.DateTime
			Get
				Return Me._DueDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._DueDate <> value) Then
					Me.OnDueDateChanging(value)
					Me.SendPropertyChanging()
					Me._DueDate = value
					Me.SendPropertyChanged("DueDate")
					Me.OnDueDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_OrderQty", DbType:="SmallInt NOT NULL")> _
		Public Property OrderQty() As Short
			Get
				Return Me._OrderQty
			End Get
			Set(ByVal value As Short)
				If (Me._OrderQty <> value) Then
					Me.OnOrderQtyChanging(value)
					Me.SendPropertyChanging()
					Me._OrderQty = value
					Me.SendPropertyChanged("OrderQty")
					Me.OnOrderQtyChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ProductID", DbType:="Int NOT NULL")> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_UnitPrice", DbType:="Money NOT NULL")> _
		Public Property UnitPrice() As Decimal
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._UnitPrice <> value) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging()
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_LineTotal", AutoSync:=AutoSync.Always, DbType:="Money NOT NULL", IsDbGenerated:=True, UpdateCheck:=UpdateCheck.Never)> _
		Public Property LineTotal() As Decimal
			Get
				Return Me._LineTotal
			End Get
			Set(ByVal value As Decimal)
				If (Me._LineTotal <> value) Then
					Me.OnLineTotalChanging(value)
					Me.SendPropertyChanging()
					Me._LineTotal = value
					Me.SendPropertyChanged("LineTotal")
					Me.OnLineTotalChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ReceivedQty", DbType:="Decimal(8,2) NOT NULL")> _
		Public Property ReceivedQty() As Decimal
			Get
				Return Me._ReceivedQty
			End Get
			Set(ByVal value As Decimal)
				If (Me._ReceivedQty <> value) Then
					Me.OnReceivedQtyChanging(value)
					Me.SendPropertyChanging()
					Me._ReceivedQty = value
					Me.SendPropertyChanged("ReceivedQty")
					Me.OnReceivedQtyChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_RejectedQty", DbType:="Decimal(8,2) NOT NULL")> _
		Public Property RejectedQty() As Decimal
			Get
				Return Me._RejectedQty
			End Get
			Set(ByVal value As Decimal)
				If (Me._RejectedQty <> value) Then
					Me.OnRejectedQtyChanging(value)
					Me.SendPropertyChanging()
					Me._RejectedQty = value
					Me.SendPropertyChanged("RejectedQty")
					Me.OnRejectedQtyChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_StockedQty", AutoSync:=AutoSync.Always, DbType:="Decimal(9,2) NOT NULL", IsDbGenerated:=True, UpdateCheck:=UpdateCheck.Never)> _
		Public Property StockedQty() As Decimal
			Get
				Return Me._StockedQty
			End Get
			Set(ByVal value As Decimal)
				If (Me._StockedQty <> value) Then
					Me.OnStockedQtyChanging(value)
					Me.SendPropertyChanging()
					Me._StockedQty = value
					Me.SendPropertyChanged("StockedQty")
					Me.OnStockedQtyChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
		Public Property ModifiedDate() As System.DateTime
			Get
				Return Me._ModifiedDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._ModifiedDate <> value) Then
					Me.OnModifiedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ModifiedDate = value
					Me.SendPropertyChanged("ModifiedDate")
					Me.OnModifiedDateChanged()
				End If
			End Set
		End Property

		<Association(Name:="PurchaseOrderHeader_PurchaseOrderDetail", Storage:="_PurchaseOrderHeader", ThisKey:="PurchaseOrderID", OtherKey:="PurchaseOrderID", IsForeignKey:=True)> _
		Public Property PurchaseOrderHeader() As PurchaseOrderHeader
			Get
				Return Me._PurchaseOrderHeader.Entity
			End Get
			Set(ByVal value As PurchaseOrderHeader)
				Dim previousValue As PurchaseOrderHeader = Me._PurchaseOrderHeader.Entity
				If ((previousValue IsNot value) OrElse (Me._PurchaseOrderHeader.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._PurchaseOrderHeader.Entity = Nothing
						previousValue.PurchaseOrderDetails.Remove(Me)
					End If
					Me._PurchaseOrderHeader.Entity = value
					If (value IsNot Nothing) Then
						value.PurchaseOrderDetails.Add(Me)
						Me._PurchaseOrderID = value.PurchaseOrderID
					Else
						Me._PurchaseOrderID = Nothing
					End If
					Me.SendPropertyChanged("PurchaseOrderHeader")
				End If
			End Set
		End Property

		<Association(Name:="Product_PurchaseOrderDetail", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=True)> _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set(ByVal value As Product)
				Dim previousValue As Product = Me._Product.Entity
				If ((previousValue IsNot value) OrElse (Me._Product.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Product.Entity = Nothing
						previousValue.PurchaseOrderDetails.Remove(Me)
					End If
					Me._Product.Entity = value
					If (value IsNot Nothing) Then
						value.PurchaseOrderDetails.Add(Me)
						Me._ProductID = value.ProductID
					Else
						Me._ProductID = Nothing
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class

	<Table(Name:="Production.Product")> _
	Partial Public Class Product
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductID As Integer

		Private _Name As String

		Private _ProductNumber As String

		Private _MakeFlag As Boolean

		Private _FinishedGoodsFlag As Boolean

		Private _Color As String

		Private _SafetyStockLevel As Short

		Private _ReorderPoint As Short

		Private _StandardCost As Decimal

		Private _ListPrice As Decimal

		Private _Size As String

		Private _SizeUnitMeasureCode As String

		Private _WeightUnitMeasureCode As String

		Private _Weight? As Decimal

		Private _DaysToManufacture As Integer

		Private _ProductLine As String

		Private _Class As String

		Private _Style As String

		Private _ProductSubcategoryID? As Integer

		Private _ProductModelID? As Integer

		Private _SellStartDate As System.DateTime

		Private _SellEndDate? As System.DateTime

		Private _DiscontinuedDate? As System.DateTime

		Private _rowguid As System.Guid

		Private _ModifiedDate As System.DateTime

		Private _PurchaseOrderDetails As EntitySet(Of PurchaseOrderDetail)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnNameChanged()
	End Sub
	Partial Private Sub OnProductNumberChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductNumberChanged()
	End Sub
	Partial Private Sub OnMakeFlagChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnMakeFlagChanged()
	End Sub
	Partial Private Sub OnFinishedGoodsFlagChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnFinishedGoodsFlagChanged()
	End Sub
	Partial Private Sub OnColorChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnColorChanged()
	End Sub
	Partial Private Sub OnSafetyStockLevelChanging(ByVal value As Short)
	End Sub
	Partial Private Sub OnSafetyStockLevelChanged()
	End Sub
	Partial Private Sub OnReorderPointChanging(ByVal value As Short)
	End Sub
	Partial Private Sub OnReorderPointChanged()
	End Sub
	Partial Private Sub OnStandardCostChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnStandardCostChanged()
	End Sub
	Partial Private Sub OnListPriceChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnListPriceChanged()
	End Sub
	Partial Private Sub OnSizeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnSizeChanged()
	End Sub
	Partial Private Sub OnSizeUnitMeasureCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnSizeUnitMeasureCodeChanged()
	End Sub
	Partial Private Sub OnWeightUnitMeasureCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnWeightUnitMeasureCodeChanged()
	End Sub
	Partial Private Sub OnWeightChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnWeightChanged()
	End Sub
	Partial Private Sub OnDaysToManufactureChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnDaysToManufactureChanged()
	End Sub
	Partial Private Sub OnProductLineChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductLineChanged()
	End Sub
	Partial Private Sub OnClassChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnClassChanged()
	End Sub
	Partial Private Sub OnStyleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnStyleChanged()
	End Sub
	Partial Private Sub OnProductSubcategoryIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnProductSubcategoryIDChanged()
	End Sub
	Partial Private Sub OnProductModelIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnProductModelIDChanged()
	End Sub
	Partial Private Sub OnSellStartDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnSellStartDateChanged()
	End Sub
	Partial Private Sub OnSellEndDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnSellEndDateChanged()
	End Sub
	Partial Private Sub OnDiscontinuedDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnDiscontinuedDateChanged()
	End Sub
	Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
	End Sub
	Partial Private Sub OnrowguidChanged()
	End Sub
	Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnModifiedDateChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._PurchaseOrderDetails = New EntitySet(Of PurchaseOrderDetail)(New Action(Of PurchaseOrderDetail)(AddressOf Me.attach_PurchaseOrderDetails), New Action(Of PurchaseOrderDetail)(AddressOf Me.detach_PurchaseOrderDetails))
			OnCreated()
		End Sub

		<Column(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set(ByVal value As String)
				If (Me._Name <> value) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging()
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ProductNumber", DbType:="NVarChar(25) NOT NULL", CanBeNull:=False)> _
		Public Property ProductNumber() As String
			Get
				Return Me._ProductNumber
			End Get
			Set(ByVal value As String)
				If (Me._ProductNumber <> value) Then
					Me.OnProductNumberChanging(value)
					Me.SendPropertyChanging()
					Me._ProductNumber = value
					Me.SendPropertyChanged("ProductNumber")
					Me.OnProductNumberChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_MakeFlag", DbType:="Bit NOT NULL")> _
		Public Property MakeFlag() As Boolean
			Get
				Return Me._MakeFlag
			End Get
			Set(ByVal value As Boolean)
				If (Me._MakeFlag <> value) Then
					Me.OnMakeFlagChanging(value)
					Me.SendPropertyChanging()
					Me._MakeFlag = value
					Me.SendPropertyChanged("MakeFlag")
					Me.OnMakeFlagChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_FinishedGoodsFlag", DbType:="Bit NOT NULL")> _
		Public Property FinishedGoodsFlag() As Boolean
			Get
				Return Me._FinishedGoodsFlag
			End Get
			Set(ByVal value As Boolean)
				If (Me._FinishedGoodsFlag <> value) Then
					Me.OnFinishedGoodsFlagChanging(value)
					Me.SendPropertyChanging()
					Me._FinishedGoodsFlag = value
					Me.SendPropertyChanged("FinishedGoodsFlag")
					Me.OnFinishedGoodsFlagChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Color", DbType:="NVarChar(15)")> _
		Public Property Color() As String
			Get
				Return Me._Color
			End Get
			Set(ByVal value As String)
				If (Me._Color <> value) Then
					Me.OnColorChanging(value)
					Me.SendPropertyChanging()
					Me._Color = value
					Me.SendPropertyChanged("Color")
					Me.OnColorChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_SafetyStockLevel", DbType:="SmallInt NOT NULL")> _
		Public Property SafetyStockLevel() As Short
			Get
				Return Me._SafetyStockLevel
			End Get
			Set(ByVal value As Short)
				If (Me._SafetyStockLevel <> value) Then
					Me.OnSafetyStockLevelChanging(value)
					Me.SendPropertyChanging()
					Me._SafetyStockLevel = value
					Me.SendPropertyChanged("SafetyStockLevel")
					Me.OnSafetyStockLevelChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ReorderPoint", DbType:="SmallInt NOT NULL")> _
		Public Property ReorderPoint() As Short
			Get
				Return Me._ReorderPoint
			End Get
			Set(ByVal value As Short)
				If (Me._ReorderPoint <> value) Then
					Me.OnReorderPointChanging(value)
					Me.SendPropertyChanging()
					Me._ReorderPoint = value
					Me.SendPropertyChanged("ReorderPoint")
					Me.OnReorderPointChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_StandardCost", DbType:="Money NOT NULL")> _
		Public Property StandardCost() As Decimal
			Get
				Return Me._StandardCost
			End Get
			Set(ByVal value As Decimal)
				If (Me._StandardCost <> value) Then
					Me.OnStandardCostChanging(value)
					Me.SendPropertyChanging()
					Me._StandardCost = value
					Me.SendPropertyChanged("StandardCost")
					Me.OnStandardCostChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ListPrice", DbType:="Money NOT NULL")> _
		Public Property ListPrice() As Decimal
			Get
				Return Me._ListPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._ListPrice <> value) Then
					Me.OnListPriceChanging(value)
					Me.SendPropertyChanging()
					Me._ListPrice = value
					Me.SendPropertyChanged("ListPrice")
					Me.OnListPriceChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Size", DbType:="NVarChar(5)")> _
		Public Property Size() As String
			Get
				Return Me._Size
			End Get
			Set(ByVal value As String)
				If (Me._Size <> value) Then
					Me.OnSizeChanging(value)
					Me.SendPropertyChanging()
					Me._Size = value
					Me.SendPropertyChanged("Size")
					Me.OnSizeChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_SizeUnitMeasureCode", DbType:="NChar(3)")> _
		Public Property SizeUnitMeasureCode() As String
			Get
				Return Me._SizeUnitMeasureCode
			End Get
			Set(ByVal value As String)
				If (Me._SizeUnitMeasureCode <> value) Then
					Me.OnSizeUnitMeasureCodeChanging(value)
					Me.SendPropertyChanging()
					Me._SizeUnitMeasureCode = value
					Me.SendPropertyChanged("SizeUnitMeasureCode")
					Me.OnSizeUnitMeasureCodeChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_WeightUnitMeasureCode", DbType:="NChar(3)")> _
		Public Property WeightUnitMeasureCode() As String
			Get
				Return Me._WeightUnitMeasureCode
			End Get
			Set(ByVal value As String)
				If (Me._WeightUnitMeasureCode <> value) Then
					Me.OnWeightUnitMeasureCodeChanging(value)
					Me.SendPropertyChanging()
					Me._WeightUnitMeasureCode = value
					Me.SendPropertyChanged("WeightUnitMeasureCode")
					Me.OnWeightUnitMeasureCodeChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Weight", DbType:="Decimal(8,2)")> _
		Public Property Weight() As Decimal?
			Get
				Return Me._Weight
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Weight.Equals(value)) Then
					Me.OnWeightChanging(value)
					Me.SendPropertyChanging()
					Me._Weight = value
					Me.SendPropertyChanged("Weight")
					Me.OnWeightChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_DaysToManufacture", DbType:="Int NOT NULL")> _
		Public Property DaysToManufacture() As Integer
			Get
				Return Me._DaysToManufacture
			End Get
			Set(ByVal value As Integer)
				If (Me._DaysToManufacture <> value) Then
					Me.OnDaysToManufactureChanging(value)
					Me.SendPropertyChanging()
					Me._DaysToManufacture = value
					Me.SendPropertyChanged("DaysToManufacture")
					Me.OnDaysToManufactureChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ProductLine", DbType:="NChar(2)")> _
		Public Property ProductLine() As String
			Get
				Return Me._ProductLine
			End Get
			Set(ByVal value As String)
				If (Me._ProductLine <> value) Then
					Me.OnProductLineChanging(value)
					Me.SendPropertyChanging()
					Me._ProductLine = value
					Me.SendPropertyChanged("ProductLine")
					Me.OnProductLineChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Class", DbType:="NChar(2)")> _
		Public Property [Class]() As String
			Get
				Return Me._Class
			End Get
			Set(ByVal value As String)
				If (Me._Class <> value) Then
					Me.OnClassChanging(value)
					Me.SendPropertyChanging()
					Me._Class = value
					Me.SendPropertyChanged("Class")
					Me.OnClassChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Style", DbType:="NChar(2)")> _
		Public Property Style() As String
			Get
				Return Me._Style
			End Get
			Set(ByVal value As String)
				If (Me._Style <> value) Then
					Me.OnStyleChanging(value)
					Me.SendPropertyChanging()
					Me._Style = value
					Me.SendPropertyChanged("Style")
					Me.OnStyleChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ProductSubcategoryID", DbType:="Int")> _
		Public Property ProductSubcategoryID() As Integer?
			Get
				Return Me._ProductSubcategoryID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ProductSubcategoryID.Equals(value)) Then
					Me.OnProductSubcategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductSubcategoryID = value
					Me.SendPropertyChanged("ProductSubcategoryID")
					Me.OnProductSubcategoryIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ProductModelID", DbType:="Int")> _
		Public Property ProductModelID() As Integer?
			Get
				Return Me._ProductModelID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ProductModelID.Equals(value)) Then
					Me.OnProductModelIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductModelID = value
					Me.SendPropertyChanged("ProductModelID")
					Me.OnProductModelIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_SellStartDate", DbType:="DateTime NOT NULL")> _
		Public Property SellStartDate() As System.DateTime
			Get
				Return Me._SellStartDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._SellStartDate <> value) Then
					Me.OnSellStartDateChanging(value)
					Me.SendPropertyChanging()
					Me._SellStartDate = value
					Me.SendPropertyChanged("SellStartDate")
					Me.OnSellStartDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_SellEndDate", DbType:="DateTime")> _
		Public Property SellEndDate() As System.DateTime?
			Get
				Return Me._SellEndDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._SellEndDate.Equals(value)) Then
					Me.OnSellEndDateChanging(value)
					Me.SendPropertyChanging()
					Me._SellEndDate = value
					Me.SendPropertyChanged("SellEndDate")
					Me.OnSellEndDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_DiscontinuedDate", DbType:="DateTime")> _
		Public Property DiscontinuedDate() As System.DateTime?
			Get
				Return Me._DiscontinuedDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._DiscontinuedDate.Equals(value)) Then
					Me.OnDiscontinuedDateChanging(value)
					Me.SendPropertyChanging()
					Me._DiscontinuedDate = value
					Me.SendPropertyChanged("DiscontinuedDate")
					Me.OnDiscontinuedDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")> _
		Public Property rowguid() As System.Guid
			Get
				Return Me._rowguid
			End Get
			Set(ByVal value As System.Guid)
				If (Me._rowguid <> value) Then
					Me.OnrowguidChanging(value)
					Me.SendPropertyChanging()
					Me._rowguid = value
					Me.SendPropertyChanged("rowguid")
					Me.OnrowguidChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
		Public Property ModifiedDate() As System.DateTime
			Get
				Return Me._ModifiedDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._ModifiedDate <> value) Then
					Me.OnModifiedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ModifiedDate = value
					Me.SendPropertyChanged("ModifiedDate")
					Me.OnModifiedDateChanged()
				End If
			End Set
		End Property

		<Association(Name:="Product_PurchaseOrderDetail", Storage:="_PurchaseOrderDetails", ThisKey:="ProductID", OtherKey:="ProductID")> _
		Public Property PurchaseOrderDetails() As EntitySet(Of PurchaseOrderDetail)
			Get
				Return Me._PurchaseOrderDetails
			End Get
			Set(ByVal value As EntitySet(Of PurchaseOrderDetail))
				Me._PurchaseOrderDetails.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_PurchaseOrderDetails(ByVal entity As PurchaseOrderDetail)
			Me.SendPropertyChanging()
			entity.Product = Me
		End Sub

		Private Sub detach_PurchaseOrderDetails(ByVal entity As PurchaseOrderDetail)
			Me.SendPropertyChanging()
			entity.Product = Nothing
		End Sub
	End Class

	<Table(Name:="HumanResources.Employee")> _
	Partial Public Class Employee
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _EmployeeID As Integer

		Private _NationalIDNumber As String

		Private _ContactID As Integer

		Private _LoginID As String

		Private _ManagerID? As Integer

		Private _Title As String

		Private _BirthDate As System.DateTime

		Private _MaritalStatus As Char

		Private _Gender As Char

		Private _HireDate As System.DateTime

		Private _SalariedFlag As Boolean

		Private _VacationHours As Short

		Private _SickLeaveHours As Short

		Private _CurrentFlag As Boolean

		Private _rowguid As System.Guid

		Private _ModifiedDate As System.DateTime

		Private _PurchaseOrderHeaders As EntitySet(Of PurchaseOrderHeader)

		Private _Employees As EntitySet(Of Employee)

		Private _Employee1 As EntityRef(Of Employee)

		Private _Contact As EntityRef(Of Contact)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnEmployeeIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnEmployeeIDChanged()
	End Sub
	Partial Private Sub OnNationalIDNumberChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnNationalIDNumberChanged()
	End Sub
	Partial Private Sub OnContactIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnContactIDChanged()
	End Sub
	Partial Private Sub OnLoginIDChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnLoginIDChanged()
	End Sub
	Partial Private Sub OnManagerIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnManagerIDChanged()
	End Sub
	Partial Private Sub OnTitleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTitleChanged()
	End Sub
	Partial Private Sub OnBirthDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnBirthDateChanged()
	End Sub
	Partial Private Sub OnMaritalStatusChanging(ByVal value As Char)
	End Sub
	Partial Private Sub OnMaritalStatusChanged()
	End Sub
	Partial Private Sub OnGenderChanging(ByVal value As Char)
	End Sub
	Partial Private Sub OnGenderChanged()
	End Sub
	Partial Private Sub OnHireDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnHireDateChanged()
	End Sub
	Partial Private Sub OnSalariedFlagChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnSalariedFlagChanged()
	End Sub
	Partial Private Sub OnVacationHoursChanging(ByVal value As Short)
	End Sub
	Partial Private Sub OnVacationHoursChanged()
	End Sub
	Partial Private Sub OnSickLeaveHoursChanging(ByVal value As Short)
	End Sub
	Partial Private Sub OnSickLeaveHoursChanged()
	End Sub
	Partial Private Sub OnCurrentFlagChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnCurrentFlagChanged()
	End Sub
	Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
	End Sub
	Partial Private Sub OnrowguidChanged()
	End Sub
	Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnModifiedDateChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._PurchaseOrderHeaders = New EntitySet(Of PurchaseOrderHeader)(New Action(Of PurchaseOrderHeader)(AddressOf Me.attach_PurchaseOrderHeaders), New Action(Of PurchaseOrderHeader)(AddressOf Me.detach_PurchaseOrderHeaders))
			Me._Employees = New EntitySet(Of Employee)(New Action(Of Employee)(AddressOf Me.attach_Employees), New Action(Of Employee)(AddressOf Me.detach_Employees))
			Me._Employee1 = Nothing
			Me._Contact = Nothing
			OnCreated()
		End Sub

		<Column(Storage:="_EmployeeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property EmployeeID() As Integer
			Get
				Return Me._EmployeeID
			End Get
			Set(ByVal value As Integer)
				If (Me._EmployeeID <> value) Then
					Me.OnEmployeeIDChanging(value)
					Me.SendPropertyChanging()
					Me._EmployeeID = value
					Me.SendPropertyChanged("EmployeeID")
					Me.OnEmployeeIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_NationalIDNumber", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)> _
		Public Property NationalIDNumber() As String
			Get
				Return Me._NationalIDNumber
			End Get
			Set(ByVal value As String)
				If (Me._NationalIDNumber <> value) Then
					Me.OnNationalIDNumberChanging(value)
					Me.SendPropertyChanging()
					Me._NationalIDNumber = value
					Me.SendPropertyChanged("NationalIDNumber")
					Me.OnNationalIDNumberChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ContactID", DbType:="Int NOT NULL")> _
		Public Property ContactID() As Integer
			Get
				Return Me._ContactID
			End Get
			Set(ByVal value As Integer)
				If (Me._ContactID <> value) Then
					If Me._Contact.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnContactIDChanging(value)
					Me.SendPropertyChanging()
					Me._ContactID = value
					Me.SendPropertyChanged("ContactID")
					Me.OnContactIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_LoginID", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)> _
		Public Property LoginID() As String
			Get
				Return Me._LoginID
			End Get
			Set(ByVal value As String)
				If (Me._LoginID <> value) Then
					Me.OnLoginIDChanging(value)
					Me.SendPropertyChanging()
					Me._LoginID = value
					Me.SendPropertyChanged("LoginID")
					Me.OnLoginIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ManagerID", DbType:="Int")> _
		Public Property ManagerID() As Integer?
			Get
				Return Me._ManagerID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ManagerID.Equals(value)) Then
					If Me._Employee1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnManagerIDChanging(value)
					Me.SendPropertyChanging()
					Me._ManagerID = value
					Me.SendPropertyChanged("ManagerID")
					Me.OnManagerIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set(ByVal value As String)
				If (Me._Title <> value) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging()
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_BirthDate", DbType:="DateTime NOT NULL")> _
		Public Property BirthDate() As System.DateTime
			Get
				Return Me._BirthDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._BirthDate <> value) Then
					Me.OnBirthDateChanging(value)
					Me.SendPropertyChanging()
					Me._BirthDate = value
					Me.SendPropertyChanged("BirthDate")
					Me.OnBirthDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_MaritalStatus", DbType:="NChar(1) NOT NULL")> _
		Public Property MaritalStatus() As Char
			Get
				Return Me._MaritalStatus
			End Get
			Set(ByVal value As Char)
				If (Me._MaritalStatus <> value) Then
					Me.OnMaritalStatusChanging(value)
					Me.SendPropertyChanging()
					Me._MaritalStatus = value
					Me.SendPropertyChanged("MaritalStatus")
					Me.OnMaritalStatusChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Gender", DbType:="NChar(1) NOT NULL")> _
		Public Property Gender() As Char
			Get
				Return Me._Gender
			End Get
			Set(ByVal value As Char)
				If (Me._Gender <> value) Then
					Me.OnGenderChanging(value)
					Me.SendPropertyChanging()
					Me._Gender = value
					Me.SendPropertyChanged("Gender")
					Me.OnGenderChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_HireDate", DbType:="DateTime NOT NULL")> _
		Public Property HireDate() As System.DateTime
			Get
				Return Me._HireDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._HireDate <> value) Then
					Me.OnHireDateChanging(value)
					Me.SendPropertyChanging()
					Me._HireDate = value
					Me.SendPropertyChanged("HireDate")
					Me.OnHireDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_SalariedFlag", DbType:="Bit NOT NULL")> _
		Public Property SalariedFlag() As Boolean
			Get
				Return Me._SalariedFlag
			End Get
			Set(ByVal value As Boolean)
				If (Me._SalariedFlag <> value) Then
					Me.OnSalariedFlagChanging(value)
					Me.SendPropertyChanging()
					Me._SalariedFlag = value
					Me.SendPropertyChanged("SalariedFlag")
					Me.OnSalariedFlagChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_VacationHours", DbType:="SmallInt NOT NULL")> _
		Public Property VacationHours() As Short
			Get
				Return Me._VacationHours
			End Get
			Set(ByVal value As Short)
				If (Me._VacationHours <> value) Then
					Me.OnVacationHoursChanging(value)
					Me.SendPropertyChanging()
					Me._VacationHours = value
					Me.SendPropertyChanged("VacationHours")
					Me.OnVacationHoursChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_SickLeaveHours", DbType:="SmallInt NOT NULL")> _
		Public Property SickLeaveHours() As Short
			Get
				Return Me._SickLeaveHours
			End Get
			Set(ByVal value As Short)
				If (Me._SickLeaveHours <> value) Then
					Me.OnSickLeaveHoursChanging(value)
					Me.SendPropertyChanging()
					Me._SickLeaveHours = value
					Me.SendPropertyChanged("SickLeaveHours")
					Me.OnSickLeaveHoursChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_CurrentFlag", DbType:="Bit NOT NULL")> _
		Public Property CurrentFlag() As Boolean
			Get
				Return Me._CurrentFlag
			End Get
			Set(ByVal value As Boolean)
				If (Me._CurrentFlag <> value) Then
					Me.OnCurrentFlagChanging(value)
					Me.SendPropertyChanging()
					Me._CurrentFlag = value
					Me.SendPropertyChanged("CurrentFlag")
					Me.OnCurrentFlagChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")> _
		Public Property rowguid() As System.Guid
			Get
				Return Me._rowguid
			End Get
			Set(ByVal value As System.Guid)
				If (Me._rowguid <> value) Then
					Me.OnrowguidChanging(value)
					Me.SendPropertyChanging()
					Me._rowguid = value
					Me.SendPropertyChanged("rowguid")
					Me.OnrowguidChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
		Public Property ModifiedDate() As System.DateTime
			Get
				Return Me._ModifiedDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._ModifiedDate <> value) Then
					Me.OnModifiedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ModifiedDate = value
					Me.SendPropertyChanged("ModifiedDate")
					Me.OnModifiedDateChanged()
				End If
			End Set
		End Property

		<Association(Name:="Employee_PurchaseOrderHeader", Storage:="_PurchaseOrderHeaders", ThisKey:="EmployeeID", OtherKey:="EmployeeID")> _
		Public Property PurchaseOrderHeaders() As EntitySet(Of PurchaseOrderHeader)
			Get
				Return Me._PurchaseOrderHeaders
			End Get
			Set(ByVal value As EntitySet(Of PurchaseOrderHeader))
				Me._PurchaseOrderHeaders.Assign(value)
			End Set
		End Property

		<Association(Name:="Employee_Employee", Storage:="_Employees", ThisKey:="EmployeeID", OtherKey:="ManagerID")> _
		Public Property Employees() As EntitySet(Of Employee)
			Get
				Return Me._Employees
			End Get
			Set(ByVal value As EntitySet(Of Employee))
				Me._Employees.Assign(value)
			End Set
		End Property

		<Association(Name:="Employee_Employee", Storage:="_Employee1", ThisKey:="ManagerID", OtherKey:="EmployeeID", IsForeignKey:=True)> _
		Public Property Employee1() As Employee
			Get
				Return Me._Employee1.Entity
			End Get
			Set(ByVal value As Employee)
				Dim previousValue As Employee = Me._Employee1.Entity
				If ((previousValue IsNot value) OrElse (Me._Employee1.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Employee1.Entity = Nothing
						previousValue.Employees.Remove(Me)
					End If
					Me._Employee1.Entity = value
					If (value IsNot Nothing) Then
						value.Employees.Add(Me)
						Me._ManagerID = value.EmployeeID
					Else
						Me._ManagerID = Nothing
					End If
					Me.SendPropertyChanged("Employee1")
				End If
			End Set
		End Property

		<Association(Name:="Contact_Employee", Storage:="_Contact", ThisKey:="ContactID", OtherKey:="ContactID", IsForeignKey:=True)> _
		Public Property Contact() As Contact
			Get
				Return Me._Contact.Entity
			End Get
			Set(ByVal value As Contact)
				Dim previousValue As Contact = Me._Contact.Entity
				If ((previousValue IsNot value) OrElse (Me._Contact.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Contact.Entity = Nothing
						previousValue.Employees.Remove(Me)
					End If
					Me._Contact.Entity = value
					If (value IsNot Nothing) Then
						value.Employees.Add(Me)
						Me._ContactID = value.ContactID
					Else
						Me._ContactID = Nothing
					End If
					Me.SendPropertyChanged("Contact")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_PurchaseOrderHeaders(ByVal entity As PurchaseOrderHeader)
			Me.SendPropertyChanging()
			entity.Employee = Me
		End Sub

		Private Sub detach_PurchaseOrderHeaders(ByVal entity As PurchaseOrderHeader)
			Me.SendPropertyChanging()
			entity.Employee = Nothing
		End Sub

		Private Sub attach_Employees(ByVal entity As Employee)
			Me.SendPropertyChanging()
			entity.Employee1 = Me
		End Sub

		Private Sub detach_Employees(ByVal entity As Employee)
			Me.SendPropertyChanging()
			entity.Employee1 = Nothing
		End Sub
	End Class

	<Table(Name:="Person.Contact")> _
	Partial Public Class Contact
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ContactID As Integer

		Private _NameStyle As Boolean

		Private _Title As String

		Private _FirstName As String

		Private _MiddleName As String

		Private _LastName As String

		Private _Suffix As String

		Private _EmailAddress As String

		Private _EmailPromotion As Integer

		Private _Phone As String

		Private _PasswordHash As String

		Private _PasswordSalt As String

		Private _AdditionalContactInfo As System.Xml.Linq.XElement

		Private _rowguid As System.Guid

		Private _ModifiedDate As System.DateTime

		Private _Employees As EntitySet(Of Employee)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnContactIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnContactIDChanged()
	End Sub
	Partial Private Sub OnNameStyleChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnNameStyleChanged()
	End Sub
	Partial Private Sub OnTitleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTitleChanged()
	End Sub
	Partial Private Sub OnFirstNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFirstNameChanged()
	End Sub
	Partial Private Sub OnMiddleNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnMiddleNameChanged()
	End Sub
	Partial Private Sub OnLastNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnLastNameChanged()
	End Sub
	Partial Private Sub OnSuffixChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnSuffixChanged()
	End Sub
	Partial Private Sub OnEmailAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnEmailAddressChanged()
	End Sub
	Partial Private Sub OnEmailPromotionChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnEmailPromotionChanged()
	End Sub
	Partial Private Sub OnPhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhoneChanged()
	End Sub
	Partial Private Sub OnPasswordHashChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPasswordHashChanged()
	End Sub
	Partial Private Sub OnPasswordSaltChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPasswordSaltChanged()
	End Sub
	Partial Private Sub OnAdditionalContactInfoChanging(ByVal value As System.Xml.Linq.XElement)
	End Sub
	Partial Private Sub OnAdditionalContactInfoChanged()
	End Sub
	Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
	End Sub
	Partial Private Sub OnrowguidChanged()
	End Sub
	Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnModifiedDateChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Employees = New EntitySet(Of Employee)(New Action(Of Employee)(AddressOf Me.attach_Employees), New Action(Of Employee)(AddressOf Me.detach_Employees))
			OnCreated()
		End Sub

		<Column(Storage:="_ContactID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ContactID() As Integer
			Get
				Return Me._ContactID
			End Get
			Set(ByVal value As Integer)
				If (Me._ContactID <> value) Then
					Me.OnContactIDChanging(value)
					Me.SendPropertyChanging()
					Me._ContactID = value
					Me.SendPropertyChanged("ContactID")
					Me.OnContactIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_NameStyle", DbType:="Bit NOT NULL")> _
		Public Property NameStyle() As Boolean
			Get
				Return Me._NameStyle
			End Get
			Set(ByVal value As Boolean)
				If (Me._NameStyle <> value) Then
					Me.OnNameStyleChanging(value)
					Me.SendPropertyChanging()
					Me._NameStyle = value
					Me.SendPropertyChanged("NameStyle")
					Me.OnNameStyleChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Title", DbType:="NVarChar(8)")> _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set(ByVal value As String)
				If (Me._Title <> value) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging()
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set(ByVal value As String)
				If (Me._FirstName <> value) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging()
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_MiddleName", DbType:="NVarChar(50)")> _
		Public Property MiddleName() As String
			Get
				Return Me._MiddleName
			End Get
			Set(ByVal value As String)
				If (Me._MiddleName <> value) Then
					Me.OnMiddleNameChanging(value)
					Me.SendPropertyChanging()
					Me._MiddleName = value
					Me.SendPropertyChanged("MiddleName")
					Me.OnMiddleNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set(ByVal value As String)
				If (Me._LastName <> value) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging()
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Suffix", DbType:="NVarChar(10)")> _
		Public Property Suffix() As String
			Get
				Return Me._Suffix
			End Get
			Set(ByVal value As String)
				If (Me._Suffix <> value) Then
					Me.OnSuffixChanging(value)
					Me.SendPropertyChanging()
					Me._Suffix = value
					Me.SendPropertyChanged("Suffix")
					Me.OnSuffixChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_EmailAddress", DbType:="NVarChar(50)")> _
		Public Property EmailAddress() As String
			Get
				Return Me._EmailAddress
			End Get
			Set(ByVal value As String)
				If (Me._EmailAddress <> value) Then
					Me.OnEmailAddressChanging(value)
					Me.SendPropertyChanging()
					Me._EmailAddress = value
					Me.SendPropertyChanged("EmailAddress")
					Me.OnEmailAddressChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_EmailPromotion", DbType:="Int NOT NULL")> _
		Public Property EmailPromotion() As Integer
			Get
				Return Me._EmailPromotion
			End Get
			Set(ByVal value As Integer)
				If (Me._EmailPromotion <> value) Then
					Me.OnEmailPromotionChanging(value)
					Me.SendPropertyChanging()
					Me._EmailPromotion = value
					Me.SendPropertyChanged("EmailPromotion")
					Me.OnEmailPromotionChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Phone", DbType:="NVarChar(25)")> _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging()
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_PasswordHash", DbType:="VarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property PasswordHash() As String
			Get
				Return Me._PasswordHash
			End Get
			Set(ByVal value As String)
				If (Me._PasswordHash <> value) Then
					Me.OnPasswordHashChanging(value)
					Me.SendPropertyChanging()
					Me._PasswordHash = value
					Me.SendPropertyChanged("PasswordHash")
					Me.OnPasswordHashChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_PasswordSalt", DbType:="VarChar(10) NOT NULL", CanBeNull:=False)> _
		Public Property PasswordSalt() As String
			Get
				Return Me._PasswordSalt
			End Get
			Set(ByVal value As String)
				If (Me._PasswordSalt <> value) Then
					Me.OnPasswordSaltChanging(value)
					Me.SendPropertyChanging()
					Me._PasswordSalt = value
					Me.SendPropertyChanged("PasswordSalt")
					Me.OnPasswordSaltChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_AdditionalContactInfo", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)> _
		Public Property AdditionalContactInfo() As System.Xml.Linq.XElement
			Get
				Return Me._AdditionalContactInfo
			End Get
			Set(ByVal value As System.Xml.Linq.XElement)
				If (Me._AdditionalContactInfo IsNot value) Then
					Me.OnAdditionalContactInfoChanging(value)
					Me.SendPropertyChanging()
					Me._AdditionalContactInfo = value
					Me.SendPropertyChanged("AdditionalContactInfo")
					Me.OnAdditionalContactInfoChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")> _
		Public Property rowguid() As System.Guid
			Get
				Return Me._rowguid
			End Get
			Set(ByVal value As System.Guid)
				If (Me._rowguid <> value) Then
					Me.OnrowguidChanging(value)
					Me.SendPropertyChanging()
					Me._rowguid = value
					Me.SendPropertyChanged("rowguid")
					Me.OnrowguidChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
		Public Property ModifiedDate() As System.DateTime
			Get
				Return Me._ModifiedDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._ModifiedDate <> value) Then
					Me.OnModifiedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ModifiedDate = value
					Me.SendPropertyChanged("ModifiedDate")
					Me.OnModifiedDateChanged()
				End If
			End Set
		End Property

		<Association(Name:="Contact_Employee", Storage:="_Employees", ThisKey:="ContactID", OtherKey:="ContactID")> _
		Public Property Employees() As EntitySet(Of Employee)
			Get
				Return Me._Employees
			End Get
			Set(ByVal value As EntitySet(Of Employee))
				Me._Employees.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Employees(ByVal entity As Employee)
			Me.SendPropertyChanging()
			entity.Contact = Me
		End Sub

		Private Sub detach_Employees(ByVal entity As Employee)
			Me.SendPropertyChanging()
			entity.Contact = Nothing
		End Sub
	End Class
End Namespace
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
